name: Solar-System-Project

on:
    workflow_dispatch: 
    push: 
        branches: 
            - main
            - 'feature/*'
env:
   MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
   MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
   MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}  # Added the environment variables into repositiory level variables and secrets into github.
jobs:
    unit_testing:
        name: Unit testing
        services:
           mongo-db:
             image: siddharth67/mongo-db:non-prod
             ports:
              - 27017:27017
        env:
           MONGO_URI: 'mongodb://localhost:27017/superData'
           MONGO_USERNAME: non-prod-user
           MONGO_PASSWORD: non-prod-password #Password has to store in secrets and username has to store in variables section under repository level.
        strategy:
            matrix:
                nodejs_version: [18, 19]
                operating_system: [ubuntu-latest]
        runs-on: ${{ matrix.operating_system}}
        steps:
            - name: Checkout the Repository
              uses: actions/checkout@v4

            - name: Install Nodejs version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.nodejs_version }}
            
            - name: Cache NPM Dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json')}}
                 

            - name: Install Dependencies
              run: npm install
            
            - name: Run Unit Testing
              run: npm test

            - name: Archive/Upload Artifcat
              uses: actions/upload-artifact@v3
              with:
                name: sai-test-latest-results
                path: test-results.xml

    code-coverage:
        name: Code coverage
        container: 
          image: node:18   
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod        # Ports are not needed as both job container and service container running on runner system. Docker containers on the same user -defined bridge  network  expose all ports to each other.  
            options:
             --name mongo
        env:
           MONGO_URI: 'mongodb://mongo:27017/superData'     #I am just using mongo label name which is mentioned in before step, because container to container we can assign abel and with the help of label job container can connect to service conatiner.
           MONGO_USERNAME: non-prod-user
           MONGO_PASSWORD: non-prod-password #Password has to store in secrets and username has to store in variables section under repository level    
        runs-on: ubuntu-latest
        steps:
          - name: Checkout The Repo
            uses: actions/checkout@v4

          #- name: setup nodejs version             #(Since I was using nodejs 18 version container in code-covergae job I have commented out these steps)
           # uses: actions/setup-node@v3
            #with:
             # node-version: 18

          - name: Cache NPM Dependencies
            uses: actions/cache@v3
            with:
                path: node_modules
                key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json')}}

          - name: Install dependencies
            run: npm install
          - name: check code coverage
            continue-on-error: true
            run: npm run coverage

          - name: Archive Test result
            if: always()
            uses: actions/upload-artifact@v3
            with:
              name: Teja-code-pstr-coverage
              path: coverage
              retention-days: 5
    docker:
        needs: [unit_testing, code-coverage]
        name: Containerization
        runs-on: ubuntu-latest
        permissions: 
          packages: write
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v4
          - name: Docker Login
            uses: docker/login-action@v2.2.0
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_PASSWORD }}

          - name: Github Container Registry Login
            uses: docker/login-action@v2.2.0
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}


          - name: Docker Build for testing
            uses: docker/build-push-action@v4
            with:
                context: .
                push: false
                tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
          - name: Docker Image Testing
            run: |
             docker images
             docker run --name solar-system-app -d \
               -p 3000:3000 \
               -e MONGO_URI=$MONGO_URI \
               -e MONGO_USERNAME=$MONGO_USERNAME \
               -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
            
               export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
               echo $IP

               echo testing image URL using wget
               wget -q -O - 127.0.0.1:3000/live | grep live

          - name: Pushing to DockerHub and Github Container
            uses: docker/build-push-action@v4
            with:
               context: .
               push: true
               tags: |
                ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
                ghcr.io/${{ github.repository_owner }}/solar-system:${{github.sha}}

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        - name: Installing kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        - name: Set kubeconfig
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{secrets.KUBECONFIG}}
        - name: Fetech k8's cluster details
          run: |
            cat /home/runner/work/_temp/kubeconfig_1721389956041
            kubectl version --short
            echo ----------------------------------
            kubectl get nodes

               



